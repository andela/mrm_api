# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#

# create credentials file
decode_credentials: &decode_credentials
  run:
    name: Decode Credentials
    command: |
      touch credentials.json
      echo $CREDENTIALS | base64 --decode >> credentials.json 

version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.1
        environment:
          APP_SETTING: testing
          TEST_DATABASE_URL: postgresql://postgres@localhost/mrm_test_db
      - image: circleci/postgres:9.6.5-alpine-ram
        environment:
          CC_TEST_REPORTER_ID: ${CC_TEST_REPORTER_ID}
          SECRET_KEY: "********"
          POSTGRES_USER: postgres
          POSTGRES_DB: mrm_test_db
          POSTGRES_PASSWORD:

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      - *decode_credentials

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: Setup code climate test-reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter

      - run:
          name: install dependencies
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      - run:
          name: run tests
          command: |
            ./cc-test-reporter before-build
            . venv/bin/activate
            tox
            coverage xml
      - run:
          name: upload test coverage to codeclimate
          command: |
            ./cc-test-reporter format-coverage -o ./.coverage -t coverage.py
            ./cc-test-reporter upload-coverage -i .coverage
      - store_artifacts:
          path: test-reports
          destination: test-reports

  deploy-job:
    docker:
      - image: google/cloud-sdk
        environment:
          GOOGLE_APPLICATION_CREDENTIALS: ${HOME}/gcloud-service-key.json
          GOOGLE_PROJECT_ID: ${GOOGLE_PROJECT_ID}
          GOOGLE_COMPUTE_ZONE: ${GOOGLE_COMPUTE_ZONE}
    steps:
      - run:
          name: Store Service Account Key into file
          command: echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
      - run:
          name: Authenticate on gcloud
          command: |
            gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
      - run:
          name: Deploy to gcloud
          command: gcloud beta compute instance-groups managed rolling-action replace mrm-staging-backend-instance-group --region europe-west1

workflows:
  version: 2
  build-then-deploy:
    jobs:
      - build
      - deploy-job:
          requires:
            - build
          filters:
            branches:
              only: develop

