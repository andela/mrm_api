# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#

# create credentials files
decode_credentials: &decode_credentials
  run:
    name: Decode Credentials
    command: |
      touch credentials.json
      touch users.json
      echo $CREDENTIALS | base64 --decode >> credentials.json
      echo $TEST_CREDENTIALS | base64 --decode >> users.json
      echo $CALENDAR_LIST | base64 --decode >> calendar_list.json
      echo $EVENTS | base64 --decode >> events.json

defaults: &defaults
  docker:
    # specify the version you desire here
    # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
    - image: circleci/python:3.6.1
      environment:
        APP_SETTING: testing
        TEST_DATABASE_URL: postgresql://postgres@localhost/mrm_test_db
    - image: circleci/postgres:9.6.5-alpine-ram
      environment:
        CC_TEST_REPORTER_ID: ${CC_TEST_REPORTER_ID}
        SECRET_KEY: "********"
        POSTGRES_USER: postgres
        POSTGRES_DB: mrm_test_db
        POSTGRES_PASSWORD:

# setup gcloud
gcloud_setup: &gcloud_setup
  run:
    name: setup gcloud
    command: |
      # install 
      sudo curl https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.tar.gz > /tmp/google-cloud-sdk.tar.gz
      sudo mkdir -p /usr/local/gcloud 
      sudo tar -C /usr/local/gcloud -xvf /tmp/google-cloud-sdk.tar.gz
      sudo /usr/local/gcloud/google-cloud-sdk/install.sh --quiet
      echo PATH=$PATH:/usr/local/gcloud/google-cloud-sdk/bin >> ~/.bashrc
      # store Service Account Key into file
      echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
      # Authenticate on gcloud
      export PATH=$PATH:/usr/local/gcloud/google-cloud-sdk/bin
      gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
      gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
      gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}

set_workspace: &set_workspace
  working_directory: ~/repo

restore_the_cache: &restore_the_cache
  restore_cache:
    keys:
    - v1-dependencies-{{ checksum "requirements.txt" }}
    # fallback to using the latest cache if no exact match is found
    - v1-dependencies-

# setup codeclimate
cc_setup: &cc_setup
  run:
    name: Setup code climate test-reporter
    command: |
      curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
      chmod +x ./cc-test-reporter

#install dependencies
install_dependencies: &install_dependencies
  run:
    name: install dependencies
    command: |
      python -m venv venv
      . venv/bin/activate
      pip install -r requirements.txt

#save cache
save_the_cache: &save_the_cache
  save_cache:
    paths:
      - ./venv
    key: v1-dependencies-{{ checksum "requirements.txt" }}

#storing artifacts
store_the_artifacts: &store_the_artifacts
  store_artifacts:
    path: test-reports
    destination: test-reports

#notifications to slack
notify_success: &notify_success
  run:
    name: Notifying slack channel (succeeded)
    when: on_success
    command: |
      bash ~/repo/.circleci/notify_slack.sh success

notify_failure: &notify_failure
  run:
    name: Notifying slack channel (failed)
    when: on_fail
    command: |
      bash ~/repo/.circleci/notify_slack.sh fail


version: 2
jobs:
  test-3.5:
    <<: *defaults
    <<: *set_workspace

    steps:
      - checkout
      - *decode_credentials
      - *gcloud_setup
      - *restore_the_cache
      - *install_dependencies
      - *save_the_cache
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            tox -e python3.5
            coverage xml
      - run:
          name: upload test coverage to bucket
          command: |
            GIT_HASH=$(echo $CIRCLE_SHA1 | cut -c -7)
            export PATH=$PATH:/usr/local/gcloud/google-cloud-sdk/bin
            gsutil cp .coverage gs://parallel-coverage-reports/backend/python3.5/.coverage-$GIT_HASH
      - *store_the_artifacts
      - *notify_success
      - *notify_failure

  test-3.6-flake:
    <<: *defaults
    <<: *set_workspace

    steps:
      - checkout
      - *decode_credentials
      - *gcloud_setup
      - *restore_the_cache
      - *install_dependencies
      - *save_the_cache
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            tox -e python3.6
            tox -e flake8
            coverage xml
      - run:
          name: upload test coverage to bucket
          command: |
            GIT_HASH=$(echo $CIRCLE_SHA1 | cut -c -7)
            export PATH=$PATH:/usr/local/gcloud/google-cloud-sdk/bin
            gsutil cp .coverage gs://parallel-coverage-reports/backend/python3.6/.coverage-$GIT_HASH
      - *store_the_artifacts
      - *notify_success
      - *notify_failure

  code-climate:
    <<: *defaults
    <<: *set_workspace

    steps:
      - checkout
      - *decode_credentials
      - *gcloud_setup
      - *restore_the_cache
      - *cc_setup
      - run:
          name: retrieve code climate reports
          command: |
            GIT_HASH=$(echo $CIRCLE_SHA1 | cut -c -7)
            mkdir -p parallel-coverage
            export PATH=$PATH:/usr/local/gcloud/google-cloud-sdk/bin
            gsutil cp gs://parallel-coverage-reports/backend/python3.5/.coverage-$GIT_HASH \
              parallel-coverage/.coverage.3.5
            gsutil cp gs://parallel-coverage-reports/backend/python3.6/.coverage-$GIT_HASH \
              parallel-coverage/.coverage.3.6
            gsutil rm gs://parallel-coverage-reports/backend/python3.5/.coverage-$GIT_HASH
            gsutil rm gs://parallel-coverage-reports/backend/python3.6/.coverage-$GIT_HASH
      - run:
          name: consolidate results
          command: |
            ./cc-test-reporter before-build
            . venv/bin/activate
            coverage combine parallel-coverage/ 
            coverage xml -i
            coverage report
            ./cc-test-reporter format-coverage -o ./.coverage -t coverage.py
            ./cc-test-reporter upload-coverage -i .coverage
      - *notify_success
      - *notify_failure

  build_docker_image:
    <<: *defaults
    <<: *set_workspace

    steps:
      - checkout
      - *decode_credentials
      - *gcloud_setup

      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: create environment variables
          command: |
            echo "APP_SETTINGS"=$(echo $IMAGE_APP_SETTINGS) >> .env
            echo "ANDELA_LOGIN_URL"=$(echo $IMAGE_ANDELA_LOGIN_URL) >> .env
            echo "ANDELA_API_URL"=$(echo $IMAGE_ANDELA_API_URL) >> .env
            if [ "$CIRCLE_BRANCH" == master ]; then
              echo "DOMAIN_NAME"=$(echo $IMAGE_PRODUCTION_DOMAIN_NAME) >> .env
              echo "DEV_DATABASE_URL"=$(echo $IMAGE_DEV_DATABASE_URL_PRODUCTION) >> .env
              echo "DATABASE_URL"=$(echo $IMAGE_DATABASE_URL_PRODUCTION) >> .env
              echo "CELERY_BROKER_URL"=$(echo $IMAGE_CELERY_BROKER_URL_PRODUCTION) >> .env
              echo "CELERY_RESULT_BACKEND"=$(echo $IMAGE_CELERY_RESULT_BACKEND_PRODUCTION) >> .env
              echo "MRM_PUSH_URL"=$(echo $IMAGE_MRM_PUSH_URL_PRODUCTION) >> .env
            elif [ "$CIRCLE_BRANCH" == develop ]; then
              echo "DOMAIN_NAME"=$(echo $IMAGE_STAGING_DOMAIN_NAME) >> .env
              echo "DEV_DATABASE_URL"=$(echo $IMAGE_DEV_DATABASE_URL_STAGING) >> .env
              echo "DATABASE_URL"=$(echo $IMAGE_DATABASE_URL_STAGING) >> .env
              echo "CELERY_BROKER_URL"=$(echo $IMAGE_CELERY_BROKER_URL_STAGING) >> .env
              echo "CELERY_RESULT_BACKEND"=$(echo $IMAGE_CELERY_RESULT_BACKEND_STAGING) >> .env
              echo "MRM_PUSH_URL"=$(echo $IMAGE_MRM_PUSH_URL_STAGING) >> .env
            else
              echo "DOMAIN_NAME"=$(echo $IMAGE_SANDBOX_DOMAIN_NAME) >> .env
              echo "DEV_DATABASE_URL"=$(echo $IMAGE_DEV_DATABASE_URL_SANDBOX) >> .env
              echo "DATABASE_URL"=$(echo $IMAGE_DATABASE_URL_SANDBOX) >> .env
              echo "CELERY_BROKER_URL"=$(echo $IMAGE_CELERY_BROKER_URL_SANDBOX) >> .env
              echo "CELERY_RESULT_BACKEND"=$(echo $IMAGE_CELERY_RESULT_BACKEND_SANDBOX) >> .env
              echo "MRM_PUSH_URL"=$(echo $IMAGE_MRM_PUSH_URL_SANDBOX) >> .env
            fi
            echo "SECRET_KEY"=$(echo $IMAGE_SECRET_KEY) >> .env
            echo "MAIL_SERVER"=$(echo $IMAGE_MAIL_SERVER) >> .env
            echo "MAIL_PORT"=$(echo $IMAGE_MAIL_PORT) >> .env
            echo "MAIL_USE_TLS"=$(echo $IMAGE_MAIL_USE_TLS) >> .env
            echo "MAIL_USERNAME"=$(echo $IMAGE_MAIL_USERNAME) >> .env
            echo "MAIL_PASSWORD"=$(echo $IMAGE_MAIL_PASSWORD) >> .env
            echo "C_FORCE_ROOT=true" >> .env
      - run:
          name: build backend docker image
          command: |
            export PATH=$PATH:/usr/local/gcloud/google-cloud-sdk/bin
            GIT_HASH=$(echo $CIRCLE_SHA1 | cut -c -7)
            if [ "$CIRCLE_BRANCH" == master ]; then
              docker login -u _json_key -p "$(echo $GOOGLE_CREDENTIALS_STAGING | base64 --decode )" https://gcr.io
              gsutil cp gs://${BACKEND_BASE_IMAGE_VERSION_PATH_PRODUCTION}current_version .
              VERSION=$(cat current_version)
              export IMAGE=$BACKEND_BASE_IMAGE_PRODUCTION:$VERSION
              sed -i "s|{{IMAGE}}|$IMAGE|g" docker/prod/Dockerfile
              docker build -f docker/prod/Dockerfile -t ${PRODUCTION_BACKEND_IMAGE}:$GIT_HASH .
              docker push ${PRODUCTION_BACKEND_IMAGE}:$GIT_HASH
              touch current_version
              echo ${GIT_HASH} > current_version
              gsutil cp current_version gs://${PRODUCTION_BACKEND_IMAGE_VERSION_PATH}
            elif [ "$CIRCLE_BRANCH" == develop ]; then
              docker login -u _json_key -p "$(echo $GOOGLE_CREDENTIALS_STAGING | base64 --decode )" https://gcr.io
              gsutil cp gs://${BACKEND_BASE_IMAGE_VERSION_PATH_STAGING}current_version .
              VERSION=$(cat current_version)
              export IMAGE=$BACKEND_BASE_IMAGE_STAGING:$VERSION
              sed -i "s|{{IMAGE}}|$IMAGE|g" docker/prod/Dockerfile
              docker build -f docker/prod/Dockerfile -t ${STAGING_BACKEND_IMAGE}:$GIT_HASH .
              docker push ${STAGING_BACKEND_IMAGE}:$GIT_HASH
              touch current_version
              echo ${GIT_HASH} > current_version
              gsutil cp current_version gs://${STAGING_BACKEND_IMAGE_VERSION_PATH}
            else
              echo $GOOGLE_CREDENTIALS_SANDBOX | base64 --decode > ${HOME}/gcloud-service-key.json
              gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
              gcloud --quiet config set project ${GOOGLE_PROJECT_ID_SANDBOX}
              gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
              docker login -u _json_key -p "$(echo $GOOGLE_CREDENTIALS_SANDBOX | base64 --decode )" https://gcr.io
              gsutil cp gs://${BACKEND_BASE_IMAGE_VERSION_PATH_SANDBOX}current_version .
              VERSION=$(cat current_version)
              export IMAGE=$BACKEND_BASE_IMAGE_SANDBOX:$VERSION
              sed -i "s|{{IMAGE}}|$IMAGE|g" docker/prod/Dockerfile
              docker build -f docker/prod/Dockerfile -t ${SANDBOX_BACKEND_IMAGE}:$GIT_HASH .
              docker push ${SANDBOX_BACKEND_IMAGE}:$GIT_HASH
              touch current_version
              echo ${GIT_HASH} > current_version
              gsutil cp current_version gs://${SANDBOX_BACKEND_IMAGE_VERSION_PATH}
            fi

  deploy-job:
    docker:
      - image: ${CIRCLECI_IMAGE}
        auth:
          username: _json_key
          password: ${GOOGLE_CREDS}
        environment:
          GOOGLE_APPLICATION_CREDENTIALS: ${HOME}/google-service-key.json

    steps:
      - checkout
      - run:
          name: setup gcloud
          command: |
            if [ "$CIRCLE_BRANCH" == master ] || [ "$CIRCLE_BRANCH" == develop ]; then
              touch google-service-key.json
              echo $GOOGLE_CREDENTIALS_STAGING | base64 --decode >> google-service-key.json 
              gcloud auth activate-service-account --key-file google-service-key.json
              gcloud --quiet config set project ${GOOGLE_PROJECT_ID_STAGING}
              gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            else
              touch google-service-key.json
              echo $GOOGLE_CREDENTIALS_SANDBOX | base64 --decode >> google-service-key.json 
              gcloud auth activate-service-account --key-file google-service-key.json
              gcloud --quiet config set project ${GOOGLE_PROJECT_ID_SANDBOX}
              gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            fi

      - run:
          name: Deploy to kubernetes
          command: |
            . .circleci/deploy_backend_to_kubernetes.sh

workflows:
  version: 2
  build-then-deploy:
    jobs:
      - test-3.5
      - test-3.6-flake
      - code-climate:
          requires:
            - test-3.5
            - test-3.6-flake
      - build_docker_image:
          requires:
            - code-climate
          filters:
            branches:
              only:
                - v2
                - develop
                - master
      - deploy-job:
          requires:
            - build_docker_image
          filters:
            branches:
              only:
                - v2
                - develop
                - master
